{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAqBeA,EAlBF,SAACC,GAAU,IAIhBC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACpB,OAGC,cAFA,CAEA,OAAKC,UAAU,sDAAf,UACC,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACC,6BAAKF,IACL,4BAAIC,WCaOK,EAzBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAOlB,OACC,8BAEEA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,cAAC,EAAD,CAECR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZM,EAAOG,GAAGR,UCFPS,EAZG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAChC,OACC,qBAAKV,UAAU,MAAf,SACC,uBAAOA,UAAU,mCAChBW,KAAK,SACLC,YAAY,sBACZC,SAAYH,OCEDI,EARA,SAAClB,GACf,OACC,qBAAKmB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACEtB,EAAMuB,YCmBKC,E,kDArBd,WAAYxB,GAAO,IAAD,8BAEjB,cAAMA,IACDyB,MAAQ,CACZC,UAAU,GAJM,E,8DAQAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAQxB,OAJGG,KAAKJ,MAAMC,SAIPG,KAAK7B,MAAMuB,a,GAlBQQ,IAAMC,WCyDnBC,G,wDAnDd,aAAc,IAAD,8BAGZ,gBAmBDC,eAAiB,SAACC,GAEjB,EAAKL,SAAS,CAACjB,YAAasB,EAAMC,OAAOC,QACzCC,QAAQC,IAAIJ,EAAMC,OAAOC,QApBzB,EAAKZ,MAAQ,CACZjB,OAAQ,GACRK,YAAa,IAPF,E,gEAWO,IAAD,OAElB2B,MAAM,8CACJC,MAAK,SAAAC,GACL,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKd,SAAS,CAACtB,OAAQoC,S,+BAUlB,MAEuBf,KAAKJ,MAA5BjB,EAFA,EAEAA,OAAQK,EAFR,EAEQA,YACTgC,EAAiBrC,EAAOsC,QAAO,SAAAC,GACpC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASpC,EAAYmC,kBAEtD,OAAyB,IAAlBxC,EAAO0C,OACb,oBAAI9C,UAAY,KAAhB,wBAEC,sBAAKA,UAAU,KAAf,UACC,oBAAIA,UAAY,KAAhB,yBACA,cAAC,EAAD,CAAWU,aAAce,KAAKK,iBAC9B,cAAC,EAAD,UACC,cAAC,EAAD,UACC,cAAC,EAAD,CAAU1B,OAAQqC,e,GA3CPd,IAAMC,YCKTmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCGdO,IAASC,OAAO,cAAC,IAAMC,WAAP,UACd,cAAC,EAAD,MACmBC,SAASC,eAAe,SAK7CZ,M","file":"static/js/main.fdcf3cfa.chunk.js","sourcesContent":["import React from 'react';\r\n// We could also change (props) to ({name, email, id}) and use that instead of the destructuring done in the first\r\n// line of the function.\r\nconst Card = (props) => {\r\n\t// we can use destructuring, shown in the line below, that saves us the work of writing props.name, props.email\r\n\t// props.id each time we use it. We assing the values of name, email and id from the object to name, email and id \r\n\t// in our function.\r\n\tconst {name, email, id} = props;\r\n\treturn(\r\n\t\t// bg = backgounrd\tdiv = ?\t\tbr3 = border \tpa = padding\tma = margin\t\tgrow = the animation.\r\n\t\t// When writing props.something we need the {} because it is a JavaScript expression. It needs to be wrapped.\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\t// This will throw an error and indicate where the code went wrong. But this will only be visible for us\r\n\t// developers, because CRA uses development mode. In production, the users wouldn't see this error. They\r\n\t// would see the ErrorBoundary h1 thats says \"something went wrong\".\r\n\t// if(true){\r\n\t// \tthrow new Error('Nope');\r\n\t// }\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user,i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={robots[i].id} \r\n\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\t// el robots.map() no se cierra con ';'. Si se pone el ';', tira error.\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) =>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='Search robofriends!'\r\n\t\t\t\tonChange = {searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll', border: '0px solid black', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component{\r\n\tconstructor(props){\r\n\t\t// we need this to have access to the props.\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError:true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\t<h1>Ooops. Something went wrong</h1>\r\n\t\t}\r\n\t\t// because children will be anything that's inside ErrorBoundary (in our case: CardList)\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nclass App extends React.Component{\r\n\tconstructor(){\r\n\t\t// We HAVE TO call the super() function which calls the constructor of React.Component. Otherwise it doesn't\r\n\t\t// work! ! !\r\n\t\tsuper()\r\n\t\t// This state is what describes our App, and usually lives in the parent component.\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// fetch() is used to make requests to servers.\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response =>{\r\n\t\t\t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then(users => {\r\n\t\t\t\tthis.setState({robots: users})\r\n\t\t\t})\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\t// every time the input changes, we get an event.\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t\tconsole.log(event.target.value);\r\n\t}\r\n\r\n\trender(){\r\n\t\t// we apply destructuring to get rid of so many\t\"this.state\"\r\n\t\tconst {robots, searchfield} = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t\t})\r\n\t\treturn robots.length === 0 ? \r\n\t\t\t<h1 className = 'tc'>Loading...</h1> :\r\n\t\t\t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className = \"f2\">RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t\r\n\t}\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n// We import the object robots from that file. That file could also have other objects that we'd want to import.\n// In such cases, we just write the other objects separated by a comma ',': import { robots, cats, dogs } from ...\n// import { robots } from './robots';\n\nReactDOM.render(<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}